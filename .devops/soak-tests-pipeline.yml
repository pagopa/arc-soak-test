# Run Automated Test in UAT environment

trigger: none

pool:
  vmImage: ubuntu-22.04

parameters:
  - name: "TARGET_ENV"
    displayName: "Target Environment"
    type: string
    default: "uat"
    values:
      - "dev"
      - "uat"

  - name: "USE_INTERNAL_ACCESS_ENV"
    displayName: "Internal access to k8s services"
    type: boolean
    default: false

  - name: "SCRIPT"
    displayName: "Script name"
    type: string
    default: "getTransactions"
    values:
      - getTransactions

  - name: "SCENARIO"
    displayName: "Soak test type"
    type: string
    default: "Fixed TPS"
    values:
      - "Fixed TPS"
      - "Growing TPS"

  - name: "VUS_MAX_ENV"
    displayName: "Max TPS"
    type: number

  - name: "SCENARIO_DURATION_ENV"
    displayName: "Test duration in seconds"
    type: number
    default: 30

  - name: "SCENARIO_RAMP_STAGE_NUMBER_ENV"
    displayName: "The number of steps for the growing TPS scenario (at least 3)"
    type: number
    default: 10

  - name: "THRESHOLDS_API_MAX_MAX_MS_ENV"
    displayName: "Max MAX milliseconds applied as default to single API tests"
    type: number
    default: 1000
  - name: "THRESHOLDS_API_MAX_AVG_MS_ENV"
    displayName: "Max AVG milliseconds applied as default to single API tests"
    type: number
    default: 500
  - name: "THRESHOLDS_API_MAX_P90_MS_ENV"
    displayName: "Max P90 milliseconds applied as default to single API tests"
    type: number
    default: 800
  - name: "THRESHOLDS_API_MAX_P95_MS_ENV"
    displayName: "Max P95 milliseconds applied as default to single API tests"
    type: number
    default: 1000

variables:
  # Comma separated list of tests to execute based on the SCRIPT parameter (if some test require the execution of more than one test, eg data preparation)
  - name: k6Test_getTransactions
    value: getTransactions

  # Resolved list of k6 script to execute
  - name: SCRIPTS_TO_EXECUTE
    value: ${{ variables[format('k6Test_{0}', parameters.SCRIPT)] }}

  # Setting env specific settings
  - ${{ if eq(parameters.TARGET_ENV, 'dev') }}:
      - name: selfHostedAgentPool
        value: cstar-dev-perf-linux
  - ${{ else }}:
      - name: selfHostedAgentPool
        value: cstar-uat-perf-linux

  # Decoding scenario type
  - ${{ if eq(parameters.SCENARIO, 'Fixed TPS') }}:
      - name: SCENARIO_TYPE_ENV
        value: constantArrivalRate
  - ${{ else }}:
      - name: SCENARIO_TYPE_ENV
        value: rampingGrowingArrivalRate

jobs:
  - deployment: SoakTest
    displayName: "Executing ${{ parameters.SCENARIO }} on ${{ parameters.TARGET_ENV }} (internal access: ${{ parameters.USE_INTERNAL_ACCESS_ENV }})"
    pool:
      name: $(selfHostedAgentPool)
    environment: ${{ upper(parameters.TARGET_ENV) }}
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - script: |
                docker pull grafana/k6:latest
              displayName: Pull k6 image
            - ${{ each k6Test in split(variables.SCRIPTS_TO_EXECUTE, ',') }}:
                - script: |
                    chmod +x runAll.sh
                    chmod +x run.sh
                    docker run --rm \
                      --user $UID \
                      -v $(pwd):/app \
                      --workdir "/app" \
                      -e RESULTS_DIR=/app \
                      -e TARGET_ENV=${{ parameters.TARGET_ENV }} \
                      -e USE_INTERNAL_ACCESS_ENV=${{ parameters.USE_INTERNAL_ACCESS_ENV }} \
                      -e SCRIPT_ENV=${{ parameters.SCRIPT }} \
                      -e SCENARIO_TYPE_ENV=${{ parameters.SCENARIO_TYPE_ENV }} \
                      \
                      -e VUS_MAX_ENV=${{ parameters.VUS_MAX_ENV }} \
                      -e SCENARIO_DURATION_ENV=${{ parameters.SCENARIO_DURATION_ENV }} \
                      -e SCENARIO_RAMP_STAGE_NUMBER_ENV=${{ parameters.SCENARIO_RAMP_STAGE_NUMBER_ENV }} \
                      \
                      -e THRESHOLDS_API_MAX_AVG_MS_ENV=${{ parameters.THRESHOLDS_API_MAX_AVG_MS_ENV }} \
                      -e THRESHOLDS_API_MAX_MAX_MS_ENV=${{ parameters.THRESHOLDS_API_MAX_MAX_MS_ENV }} \
                      -e THRESHOLDS_API_MAX_P90_MS_ENV=${{ parameters.THRESHOLDS_API_MAX_P90_MS_ENV }} \
                      -e THRESHOLDS_API_MAX_P95_MS_ENV=${{ parameters.THRESHOLDS_API_MAX_P95_MS_ENV }} \
                      \
                      --entrypoint /app/run.sh \
                      grafana/k6:latest \
                      ${{ parameters.TARGET_ENV }} ./src/tests/${{k6Test}}.js
              condition: true
              displayName: Run k6 ${{k6Test}}.js on ${{ parameters.TARGET_ENV }}

            - task: PublishTestResults@2
              condition: true
              displayName: "Publishing TestResults of k6 tests in folder: results"
              inputs:
                testResultsFormat: "JUnit"
                testResultsFiles: "results/*-result.xml"
                searchFolder: "$(System.DefaultWorkingDirectory)"
                failTaskOnFailedTests: true

            - task: PublishPipelineArtifact@1
              displayName: "Publishing results of k6 tests in folder: results"
              condition: true
              inputs:
                artifact: "results"
                targetPath: "results"
                publishLocation: "pipeline"
